// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP___FORCE_NONSTANDARD_LAYOUT
#define _LIBCPP___FORCE_NONSTANDARD_LAYOUT

#include <__config>

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#  pragma GCC system_header
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

// Force a class to be non-standard layout by giving it two bases with the same
// type. This is useful when structure protection is enabled because structure
// protection cannot be applied to standard layout classes. We may use this in
// cases where the standard does not specify whether a standard library class is
// standard layout. See C++2a [class]p7:
//   A class S is a standard-layout class if it:
//     -- has at most one base class subobject of any given type
_LIBCPP_DIAGNOSTIC_PUSH
_LIBCPP_CLANG_DIAGNOSTIC_IGNORED("-Winaccessible-base")
class __force_nonstandard_layout_base1 {};
class __force_nonstandard_layout_base2 : __force_nonstandard_layout_base1 {};
class __force_nonstandard_layout : __force_nonstandard_layout_base1, __force_nonstandard_layout_base2 {};
_LIBCPP_DIAGNOSTIC_POP

#if __has_extension(pointer_field_protection)
#  define _LIBCPP_MAYBE_FORCE_NONSTANDARD_LAYOUT : __force_nonstandard_layout
#else
#  define _LIBCPP_MAYBE_FORCE_NONSTANDARD_LAYOUT
#endif

_LIBCPP_END_NAMESPACE_STD

#endif // _LIBCPP___FORCE_NONSTANDARD_LAYOUT
