# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -mtriple=aarch64 -mattr=+sve -run-pass=aarch64-expand-pseudo -verify-machineinstrs %s -o - | FileCheck %s

# Test the expansion of constructive ternary operations into their
# destructive counterparts.


# EXT_ZZZI

---
name:            test_ext_zzzi_unique
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_ext_zzzi_unique
    ; CHECK: BUNDLE implicit-def $z2, implicit-def $q2, implicit-def $d2, implicit-def $s2, implicit-def $h2, implicit-def $b2, implicit-def $b2_hi, implicit-def $h2_hi, implicit-def $s2_hi, implicit-def $d2_hi, implicit-def $q2_hi, implicit $z0, implicit killed $z1 {
    ; CHECK-NEXT:   $z2 = MOVPRFX_ZZ $z0
    ; CHECK-NEXT:   $z2 = EXT_ZZI internal killed $z2, killed $z1, 1
    ; CHECK-NEXT: }
    ; CHECK-NEXT: RET undef $lr, implicit killed $z2
    $z2 = EXT_ZZZI killed $z0, killed $z1, 1
    RET_ReallyLR implicit killed $z2
...

# Here the destination register is the same as the second operand,
# we cannot use movprfx.
---
name:            test_ext_zzzi_not_unique
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_ext_zzzi_not_unique
    ; CHECK: BUNDLE implicit-def $z2, implicit-def $q2, implicit-def $d2, implicit-def $s2, implicit-def $h2, implicit-def $b2, implicit-def $b2_hi, implicit-def $h2_hi, implicit-def $s2_hi, implicit-def $d2_hi, implicit-def $q2_hi, implicit $z0 {
    ; CHECK-NEXT:   $z2 = ORR_ZZZ $z0, $z0
    ; CHECK-NEXT:   $z2 = EXT_ZZI internal killed $z2, internal killed $z2, 1
    ; CHECK-NEXT: }
    ; CHECK-NEXT: RET undef $lr, implicit killed $z2
    $z2 = EXT_ZZZI killed $z0, killed $z2, 1
    RET_ReallyLR implicit killed $z2
...

---
name:            test_ext_zzzi_same_inputs
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_ext_zzzi_same_inputs
    ; CHECK: BUNDLE implicit-def $z2, implicit-def $q2, implicit-def $d2, implicit-def $s2, implicit-def $h2, implicit-def $b2, implicit-def $b2_hi, implicit-def $h2_hi, implicit-def $s2_hi, implicit-def $d2_hi, implicit-def $q2_hi, implicit killed $z0 {
    ; CHECK-NEXT:   $z2 = MOVPRFX_ZZ $z0
    ; CHECK-NEXT:   $z2 = EXT_ZZI internal killed $z2, killed $z0, 1
    ; CHECK-NEXT: }
    ; CHECK-NEXT: RET undef $lr, implicit killed $z2
    $z2 = EXT_ZZZI killed $z0, killed $z0, 1
    RET_ReallyLR implicit killed $z2
...

---
name:            test_ext_zzzi_already_destructive
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_ext_zzzi_already_destructive
    ; CHECK: $z2 = EXT_ZZI killed $z2, killed $z1, 1
    ; CHECK-NEXT: RET undef $lr, implicit killed $z2
    $z2 = EXT_ZZZI killed $z2, killed $z1, 1
    RET_ReallyLR implicit killed $z2
...

---
name:            test_ext_zzzi_unique_implicit_ops
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_ext_zzzi_unique_implicit_ops
    ; CHECK: BUNDLE implicit-def $z2, implicit-def $q2, implicit-def $d2, implicit-def $s2, implicit-def $h2, implicit-def $b2, implicit-def $b2_hi, implicit-def $h2_hi, implicit-def $s2_hi, implicit-def $d2_hi, implicit-def $q2_hi, implicit $z0, implicit killed $q0, implicit killed $q1, implicit killed $z1 {
    ; CHECK-NEXT:   $z2 = MOVPRFX_ZZ $z0, implicit killed $q0, implicit killed $q1
    ; CHECK-NEXT:   $z2 = EXT_ZZI internal killed $z2, killed $z1, 1, implicit-def $q2
    ; CHECK-NEXT: }
    ; CHECK-NEXT: RET undef $lr, implicit killed $q2
    $z2 = EXT_ZZZI killed $z0, killed $z1, 1, implicit-def $q2, implicit killed $q0, implicit killed $q1
    RET_ReallyLR implicit killed $q2
...

---
name:            test_ext_zzzi_undef
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_ext_zzzi_undef
    ; CHECK: BUNDLE implicit-def $z2, implicit-def $q2, implicit-def $d2, implicit-def $s2, implicit-def $h2, implicit-def $b2, implicit-def $b2_hi, implicit-def $h2_hi, implicit-def $s2_hi, implicit-def $d2_hi, implicit-def $q2_hi, implicit undef $z0, implicit undef $z1 {
    ; CHECK-NEXT:   $z2 = MOVPRFX_ZZ undef $z0
    ; CHECK-NEXT:   $z2 = EXT_ZZI internal killed $z2, undef $z1, 1
    ; CHECK-NEXT: }
    ; CHECK-NEXT: RET undef $lr, implicit killed $z2
    $z2 = EXT_ZZZI undef $z0, undef $z1, 1
    RET_ReallyLR implicit killed $z2
...
